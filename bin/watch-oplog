#!/usr/bin/env ruby
require 'logger'
require 'optparse'

require 'rubygems'
require 'bundler/setup'
require 'mongoriver'

module Mongoriver
  class OplogWatcher < AbstractOutlet
    include Mongoriver::Logging

    def insert(db_name, collection_name, document)
      log.info("got an insert for #{db_name}.#{collection_name}! #{document.inspect}")
    end

    def remove(db_name, collection_name, document)
      log.info("got a remove for #{db_name}.#{collection_name}! #{document.inspect}")
    end

    def update(db_name, collection_name, selector, updates)
      log.info("got an update for #{db_name}.#{collection_name}! #{selector}, #{updates}")
    end
  end
end

def main
  options = {:host => nil, :port => nil, :type => :direct, :optime => nil, :pause => true, :verbose => 0}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      options[:verbose] += 1
    end

    opts.on('--help', 'Display this message') do
      puts opts
      exit(1)
    end

    opts.on('-h HOST', '--host', 'Upstream host to connect to') do |host|
      options[:host] = host
    end

    opts.on('-p PORT', '--port', 'Upstream host to connect to') do |port|
      options[:port] = Integer(port)
    end

    opts.on('-s OPTIME', '--start', 'Starting optime') do |optime|
      options[:optime] = Integer(optime)
    end
  end
  optparse.parse!

  if ARGV.length != 0
    puts optparse
    return 1
  end

  log = Log4r::Logger.new('Stripe')
  log.outputters = Log4r::StdoutOutputter.new(STDERR)
  if options[:verbose] >= 1
    log.level = Log4r::DEBUG
  else
    log.level = Log4r::INFO
  end

  tailer = Mongoriver::Tailer.new(["#{options[:host]}:#{options[:port]}"], options[:type])
  outlet = Mongoriver::OplogWatcher.new

  stream = Mongoriver::Stream.new(tailer, outlet)

  %w[TERM INT USR2].each do |sig|
    Signal.trap(sig) do
      log.info("Got SIG#{sig}. Preparing to exit...")
      stream.stop
    end
  end

  stream.run_forever(options[:optime])
  return 0
end

if $0 == __FILE__
  ret = main
  begin
    exit(ret)
  rescue TypeError
    exit(0)
  end
end
